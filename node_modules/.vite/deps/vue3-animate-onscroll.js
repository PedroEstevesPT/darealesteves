// node_modules/vue3-animate-onscroll/lib/scroll-animate.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var scroll_animate_default = function() {
  var getClientHeight = function() {
    return document.documentElement.clientHeight;
  };
  var isInScrollView = function(_a) {
    var top = _a.top, bottom = _a.bottom;
    return top < getClientHeight() && bottom > 0;
  };
  var isDirectionAgnostic = function(params) {
    return typeof params === "string";
  };
  var isBiDirectional = function(params) {
    return params.down && params.up;
  };
  var hasBeenApplied = function(current, prev) {
    if (current === void 0) {
      current = "";
    }
    if (prev === void 0) {
      prev = "";
    }
    return current.trim() !== prev.trim();
  };
  var shouldResetAnimation = function(_a) {
    var params = _a.params, isUpwards = _a.isUpwards, repeat = _a.repeat;
    return repeat && (isUpwards && params.down || !isUpwards && params.up);
  };
  var applyAnimationClass = function(el, current, newClass) {
    if (newClass === void 0) {
      newClass = "";
    }
    return el.className = (current + " " + newClass).trim();
  };
  return {
    isInView: isInScrollView,
    run: function(el, _a, _b) {
      var params = _a.value, modifiers = _a.modifiers;
      var isUpwards = _b.isUpwards, _c = _b.previousClassName, previousClassName = _c === void 0 ? "" : _c;
      if (!this.isInView(el.getBoundingClientRect())) {
        if (modifiers.repeat && isDirectionAgnostic(params)) {
          return applyAnimationClass(el, previousClassName);
        }
        return;
      }
      if (isDirectionAgnostic(params)) {
        return applyAnimationClass(el, previousClassName, params);
      }
      if (modifiers.repeat || isBiDirectional(params) || !hasBeenApplied(el.className, previousClassName)) {
        var animationClass = isUpwards ? params.up : params.down;
        return applyAnimationClass(el, previousClassName, animationClass);
      }
      if (shouldResetAnimation(__assign({ params, isUpwards }, modifiers))) {
        return applyAnimationClass(el, previousClassName);
      }
    }
  };
};

// node_modules/vue3-animate-onscroll/lib/index.js
var lib_default = {
  ScrollAnimate: scroll_animate_default,
  install: function(app, opt) {
    app.directive("animate-onscroll", {
      mounted: function(el, binding) {
        var domRef = window;
        if (opt && (opt === null || opt === void 0 ? void 0 : opt.id)) {
          domRef = document.getElementById(opt.id);
        } else if (opt && (opt === null || opt === void 0 ? void 0 : opt.tag) == "body") {
          domRef = document.body;
        }
        var scrollAnimate = scroll_animate_default();
        var previousClassName = el.className;
        var lastScrollTop = window.pageYOffset;
        domRef.addEventListener("scroll", function() {
          var scrollTop = window.pageYOffset || domRef.scrollTop;
          var isUpwards = scrollTop < lastScrollTop;
          scrollAnimate.run(el, binding, { isUpwards, previousClassName });
          lastScrollTop = scrollTop <= 0 ? 0 : scrollTop;
        }, false);
      }
    });
  }
};
export {
  lib_default as default
};
//# sourceMappingURL=vue3-animate-onscroll.js.map
